name: CI - Airline API
run-name: CI ${{ github.ref_name }}   # Nombre de la ejecuci√≥n, muestra la rama

# Eventos que activan el workflow
on:
  push:
    branches: [ "master" ]              # Se ejecuta al hacer push a main
  pull_request:
    branches: [ "master" ]              # Se ejecuta en PR hacia main
  workflow_dispatch:                  # Permite lanzarlo manualmente

# Permisos de seguridad
permissions:
  contents: read                      # Lectura del repositorio

# Control de concurrencia para optimizar recursos
concurrency:
  group: ci-${{ github.ref }}         # Evita ejecuciones duplicadas por rama
  cancel-in-progress: true            # Cancela ejecuciones previas en curso

jobs:
  test:
    runs-on: ubuntu-latest            # Entorno: √∫ltima versi√≥n de Ubuntu

    steps:
      # Paso 1: Obtener el c√≥digo del repositorio
      - name: üì• Checkout repository
        uses: actions/checkout@v4     # Clona el c√≥digo del repo

      # Paso 2: Configurar Python
      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"      # Versi√≥n espec√≠fica de Python

      # Paso 3: Cache de dependencias para builds m√°s r√°pidos
      - name: ‚ôªÔ∏è Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      # Paso 4: Instalar dependencias de Python
      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt 
          else
            # Instalar dependencias por defecto para testing
            pip install pytest selenium webdriver-manager pytest-html pytest-cov behave pytest-bdd
          fi

      # Paso 5: Configurar archivo de entorno
      - name: ‚öôÔ∏è Prepare environment file
        run: |
          # Copiar archivo de ejemplo o crear uno b√°sico si no existe
          if [ -f .env.example ]; then
            cp .env.example .env
          else
            echo "# Environment variables" > .env
            echo "BASE_URL=http://localhost:8000" >> .env
          fi

      # Paso 6: Verificar que el setup est√© correcto
      - name: ‚úÖ Verify setup
        run: |
          python --version
          pip list | grep -E "(pytest|selenium|cov|behave)"
          which google-chrome
          which Xvfb

      # Paso 7: Ejecutar pruebas con cobertura y reportes
      - name: üß™ Run tests with Pytest
        env:
          BASE_URL: ${{ secrets.BASE_URL }}
          SAUCE_USERNAME: ${{ secrets.SAUCE_USERNAME }}
          SAUCE_ACCESS_KEY: ${{ secrets.SAUCE_ACCESS_KEY }}
        run: |
          # Crear directorio para reportes
          mkdir -p reports
          mkdir -p screenshots
          
          # Ejecutar pruebas con Xvfb para entorno headless
          xvfb-run -a pytest -q --maxfail=1 --disable-warnings \
            --html=reports/pytest-report.html --self-contained-html \
            --junitxml=reports/junit.xml \
            --cov=. --cov-report=term-missing --cov-report=xml:reports/coverage.xml \
            --cov-report=html:reports/coverage-html
          
          # Mostrar resumen de cobertura en consola
          python -m coverage report

      # Paso 8: Subir reportes y screenshots como artifacts
      - name: üìä Upload test artifacts (reports and screenshots)
        if: always()  # Siempre sube artifacts, incluso si fallan las pruebas
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-${{ github.run_id }}
          path: |
            reports/**
            **/screenshots/**
          if-no-files-found: ignore
          retention-days: 7  # Conservar artifacts por 7 d√≠as

      # Paso 9: Opcional - Subir reporte de cobertura a Codecov
      - name: üìà Upload coverage to Codecov (Optional)
        if: success()  # Solo si las pruebas pasan
        uses: codecov/codecov-action@v3
        with:
          file: ./reports/coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      # Paso 10: Notificaci√≥n en caso de fallo
      - name: ‚ùå Notify on failure
        if: failure()  # Solo se ejecuta si el job falla
        run: |
          echo "Tests failed! Check the artifacts for details."
          # Aqu√≠ podr√≠as agregar notificaciones a Slack/Email/etc.

